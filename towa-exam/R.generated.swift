//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 7 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `accent_light_color`.
    static let accent_light_color = Rswift.ColorResource(bundle: R.hostingBundle, name: "accent_light_color")
    /// Color `error_color`.
    static let error_color = Rswift.ColorResource(bundle: R.hostingBundle, name: "error_color")
    /// Color `light_highlight_color`.
    static let light_highlight_color = Rswift.ColorResource(bundle: R.hostingBundle, name: "light_highlight_color")
    /// Color `main_accent_color`.
    static let main_accent_color = Rswift.ColorResource(bundle: R.hostingBundle, name: "main_accent_color")
    /// Color `main_background`.
    static let main_background = Rswift.ColorResource(bundle: R.hostingBundle, name: "main_background")
    /// Color `main_violet_color`.
    static let main_violet_color = Rswift.ColorResource(bundle: R.hostingBundle, name: "main_violet_color")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "accent_light_color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accent_light_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accent_light_color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "error_color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func error_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.error_color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "light_highlight_color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func light_highlight_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.light_highlight_color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "main_accent_color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func main_accent_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.main_accent_color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "main_background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func main_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.main_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "main_violet_color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func main_violet_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.main_violet_color, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "accent_light_color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accent_light_color(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accent_light_color.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "error_color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func error_color(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.error_color.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "light_highlight_color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func light_highlight_color(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.light_highlight_color.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "main_accent_color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func main_accent_color(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.main_accent_color.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "main_background", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func main_background(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.main_background.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "main_violet_color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func main_violet_color(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.main_violet_color.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `Font Awesome 5 Brands-Regular-400.otf`.
    static let fontAwesome5BrandsRegular400Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "Font Awesome 5 Brands-Regular-400", pathExtension: "otf")
    /// Resource file `Font Awesome 5 Free-Regular-400.otf`.
    static let fontAwesome5FreeRegular400Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "Font Awesome 5 Free-Regular-400", pathExtension: "otf")
    /// Resource file `Font Awesome 5 Free-Solid-900.otf`.
    static let fontAwesome5FreeSolid900Otf = Rswift.FileResource(bundle: R.hostingBundle, name: "Font Awesome 5 Free-Solid-900", pathExtension: "otf")

    /// `bundle.url(forResource: "Font Awesome 5 Brands-Regular-400", withExtension: "otf")`
    static func fontAwesome5BrandsRegular400Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fontAwesome5BrandsRegular400Otf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Font Awesome 5 Free-Regular-400", withExtension: "otf")`
    static func fontAwesome5FreeRegular400Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fontAwesome5FreeRegular400Otf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Font Awesome 5 Free-Solid-900", withExtension: "otf")`
    static func fontAwesome5FreeSolid900Otf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fontAwesome5FreeSolid900Otf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `FontAwesome5Brands-Regular`.
    static let fontAwesome5BrandsRegular = Rswift.FontResource(fontName: "FontAwesome5Brands-Regular")
    /// Font `FontAwesome5Free-Regular`.
    static let fontAwesome5FreeRegular = Rswift.FontResource(fontName: "FontAwesome5Free-Regular")
    /// Font `FontAwesome5Free-Solid`.
    static let fontAwesome5FreeSolid = Rswift.FontResource(fontName: "FontAwesome5Free-Solid")

    /// `UIFont(name: "FontAwesome5Brands-Regular", size: ...)`
    static func fontAwesome5BrandsRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fontAwesome5BrandsRegular, size: size)
    }

    /// `UIFont(name: "FontAwesome5Free-Regular", size: ...)`
    static func fontAwesome5FreeRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fontAwesome5FreeRegular, size: size)
    }

    /// `UIFont(name: "FontAwesome5Free-Solid", size: ...)`
    static func fontAwesome5FreeSolid(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fontAwesome5FreeSolid, size: size)
    }

    static func validate() throws {
      if R.font.fontAwesome5BrandsRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FontAwesome5Brands-Regular' could not be loaded, is 'Font Awesome 5 Brands-Regular-400.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fontAwesome5FreeRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FontAwesome5Free-Regular' could not be loaded, is 'Font Awesome 5 Free-Regular-400.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fontAwesome5FreeSolid(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FontAwesome5Free-Solid' could not be loaded, is 'Font Awesome 5 Free-Solid-900.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `appLogo`.
    static let appLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "appLogo")
    /// Image `arrow_icon`.
    static let arrow_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_icon")
    /// Image `check_icon`.
    static let check_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "check_icon")
    /// Image `client_pin`.
    static let client_pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "client_pin")
    /// Image `close_icon`.
    static let close_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "close_icon")
    /// Image `info_icon`.
    static let info_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "info_icon")
    /// Image `password_icon`.
    static let password_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "password_icon")
    /// Image `uncheck_icon`.
    static let uncheck_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "uncheck_icon")
    /// Image `user_pin`.
    static let user_pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "user_pin")
    /// Image `userlist_placeholder`.
    static let userlist_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "userlist_placeholder")
    /// Image `username_icon`.
    static let username_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "username_icon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "appLogo", bundle: ..., traitCollection: ...)`
    static func appLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_icon", bundle: ..., traitCollection: ...)`
    static func arrow_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check_icon", bundle: ..., traitCollection: ...)`
    static func check_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "client_pin", bundle: ..., traitCollection: ...)`
    static func client_pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.client_pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close_icon", bundle: ..., traitCollection: ...)`
    static func close_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "info_icon", bundle: ..., traitCollection: ...)`
    static func info_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "password_icon", bundle: ..., traitCollection: ...)`
    static func password_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.password_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uncheck_icon", bundle: ..., traitCollection: ...)`
    static func uncheck_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uncheck_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user_pin", bundle: ..., traitCollection: ...)`
    static func user_pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user_pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "userlist_placeholder", bundle: ..., traitCollection: ...)`
    static func userlist_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userlist_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "username_icon", bundle: ..., traitCollection: ...)`
    static func username_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.username_icon, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 25 localization keys.
    struct localizable {
      /// en translation: Are you sure you want to logout?
      ///
      /// Locales: en
      static let logout_warning_message = Rswift.StringResource(key: "logout_warning_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en
      static let cancel_title = Rswift.StringResource(key: "cancel_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Check distance
      ///
      /// Locales: en
      static let check_distance_title = Rswift.StringResource(key: "check_distance_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create Account
      ///
      /// Locales: en
      static let create_account_button_title = Rswift.StringResource(key: "create_account_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Developed by nicoaureliovillanueva@gmail.com
      ///
      /// Locales: en
      static let developer_email = Rswift.StringResource(key: "developer_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Distance
      ///
      /// Locales: en
      static let distance_title = Rswift.StringResource(key: "distance_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en
      static let login_button_title = Rswift.StringResource(key: "login_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Login Error
      ///
      /// Locales: en
      static let login_error_title = Rswift.StringResource(key: "login_error_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book
      ///
      /// Locales: en
      static let app_sub_title_main = Rswift.StringResource(key: "app_sub_title_main", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Min. 8 character, 1 uppercase & 1 lowercase.
      ///
      /// Locales: en
      static let password_validation_error_message = Rswift.StringResource(key: "password_validation_error_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en
      static let ok_button_title = Rswift.StringResource(key: "ok_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en
      static let password_place_holder = Rswift.StringResource(key: "password_place_holder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please enter info to create account
      ///
      /// Locales: en
      static let signup_sub_title = Rswift.StringResource(key: "signup_sub_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please sign in to continue
      ///
      /// Locales: en
      static let login_sub_title = Rswift.StringResource(key: "login_sub_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Register
      ///
      /// Locales: en
      static let sign_up_button_title = Rswift.StringResource(key: "sign_up_button_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sign Up Error
      ///
      /// Locales: en
      static let signup_error_title = Rswift.StringResource(key: "signup_error_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: TOWA CODE CHALLENGE
      ///
      /// Locales: en
      static let app_title_main = Rswift.StringResource(key: "app_title_main", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The account that you've entered doesn't match any account.
      ///
      /// Locales: en
      static let login_error_message = Rswift.StringResource(key: "login_error_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unavailable username. Username is already taken.
      ///
      /// Locales: en
      static let signup_error_message = Rswift.StringResource(key: "signup_error_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: User list
      ///
      /// Locales: en
      static let home_screen_title = Rswift.StringResource(key: "home_screen_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Username
      ///
      /// Locales: en
      static let username_place_holder = Rswift.StringResource(key: "username_place_holder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Username must be at least 3 characters.
      ///
      /// Locales: en
      static let username_validation_error_message = Rswift.StringResource(key: "username_validation_error_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Warning
      ///
      /// Locales: en
      static let warning_title = Rswift.StringResource(key: "warning_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You are here
      ///
      /// Locales: en
      static let current_location_title = Rswift.StringResource(key: "current_location_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You can check user detail
      ///
      /// Locales: en
      static let home_screen_sub_title = Rswift.StringResource(key: "home_screen_sub_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: Are you sure you want to logout?
      ///
      /// Locales: en
      static func logout_warning_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logout_warning_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logout_warning_message"
        }

        return NSLocalizedString("logout_warning_message", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en
      static func cancel_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel_title"
        }

        return NSLocalizedString("cancel_title", bundle: bundle, comment: "")
      }

      /// en translation: Check distance
      ///
      /// Locales: en
      static func check_distance_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("check_distance_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "check_distance_title"
        }

        return NSLocalizedString("check_distance_title", bundle: bundle, comment: "")
      }

      /// en translation: Create Account
      ///
      /// Locales: en
      static func create_account_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("create_account_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "create_account_button_title"
        }

        return NSLocalizedString("create_account_button_title", bundle: bundle, comment: "")
      }

      /// en translation: Developed by nicoaureliovillanueva@gmail.com
      ///
      /// Locales: en
      static func developer_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("developer_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "developer_email"
        }

        return NSLocalizedString("developer_email", bundle: bundle, comment: "")
      }

      /// en translation: Distance
      ///
      /// Locales: en
      static func distance_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("distance_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "distance_title"
        }

        return NSLocalizedString("distance_title", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en
      static func login_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_button_title"
        }

        return NSLocalizedString("login_button_title", bundle: bundle, comment: "")
      }

      /// en translation: Login Error
      ///
      /// Locales: en
      static func login_error_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_error_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_error_title"
        }

        return NSLocalizedString("login_error_title", bundle: bundle, comment: "")
      }

      /// en translation: Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book
      ///
      /// Locales: en
      static func app_sub_title_main(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("app_sub_title_main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "app_sub_title_main"
        }

        return NSLocalizedString("app_sub_title_main", bundle: bundle, comment: "")
      }

      /// en translation: Min. 8 character, 1 uppercase & 1 lowercase.
      ///
      /// Locales: en
      static func password_validation_error_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password_validation_error_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password_validation_error_message"
        }

        return NSLocalizedString("password_validation_error_message", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en
      static func ok_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ok_button_title"
        }

        return NSLocalizedString("ok_button_title", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en
      static func password_place_holder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password_place_holder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password_place_holder"
        }

        return NSLocalizedString("password_place_holder", bundle: bundle, comment: "")
      }

      /// en translation: Please enter info to create account
      ///
      /// Locales: en
      static func signup_sub_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signup_sub_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signup_sub_title"
        }

        return NSLocalizedString("signup_sub_title", bundle: bundle, comment: "")
      }

      /// en translation: Please sign in to continue
      ///
      /// Locales: en
      static func login_sub_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_sub_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_sub_title"
        }

        return NSLocalizedString("login_sub_title", bundle: bundle, comment: "")
      }

      /// en translation: Register
      ///
      /// Locales: en
      static func sign_up_button_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_up_button_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_up_button_title"
        }

        return NSLocalizedString("sign_up_button_title", bundle: bundle, comment: "")
      }

      /// en translation: Sign Up Error
      ///
      /// Locales: en
      static func signup_error_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signup_error_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signup_error_title"
        }

        return NSLocalizedString("signup_error_title", bundle: bundle, comment: "")
      }

      /// en translation: TOWA CODE CHALLENGE
      ///
      /// Locales: en
      static func app_title_main(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("app_title_main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "app_title_main"
        }

        return NSLocalizedString("app_title_main", bundle: bundle, comment: "")
      }

      /// en translation: The account that you've entered doesn't match any account.
      ///
      /// Locales: en
      static func login_error_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_error_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_error_message"
        }

        return NSLocalizedString("login_error_message", bundle: bundle, comment: "")
      }

      /// en translation: Unavailable username. Username is already taken.
      ///
      /// Locales: en
      static func signup_error_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signup_error_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signup_error_message"
        }

        return NSLocalizedString("signup_error_message", bundle: bundle, comment: "")
      }

      /// en translation: User list
      ///
      /// Locales: en
      static func home_screen_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home_screen_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home_screen_title"
        }

        return NSLocalizedString("home_screen_title", bundle: bundle, comment: "")
      }

      /// en translation: Username
      ///
      /// Locales: en
      static func username_place_holder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("username_place_holder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "username_place_holder"
        }

        return NSLocalizedString("username_place_holder", bundle: bundle, comment: "")
      }

      /// en translation: Username must be at least 3 characters.
      ///
      /// Locales: en
      static func username_validation_error_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("username_validation_error_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "username_validation_error_message"
        }

        return NSLocalizedString("username_validation_error_message", bundle: bundle, comment: "")
      }

      /// en translation: Warning
      ///
      /// Locales: en
      static func warning_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("warning_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "warning_title"
        }

        return NSLocalizedString("warning_title", bundle: bundle, comment: "")
      }

      /// en translation: You are here
      ///
      /// Locales: en
      static func current_location_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("current_location_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "current_location_title"
        }

        return NSLocalizedString("current_location_title", bundle: bundle, comment: "")
      }

      /// en translation: You can check user detail
      ///
      /// Locales: en
      static func home_screen_sub_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home_screen_sub_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home_screen_sub_title"
        }

        return NSLocalizedString("home_screen_sub_title", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
